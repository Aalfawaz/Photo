public class BST<T> {

    public class BSTNode<T> {
        public String key;
        public T data;
        public BSTNode<T> left, right;

        public BSTNode(String k, T val) {
            key = k;
            data = val;
            left = right = null;
        }

        public BSTNode(String k, T val, BSTNode<T> l, BSTNode<T> r) {
            key = k;
            data = val;
            left = l;
            right = r;
        }
    }

    private class RemoveResult {
        BSTNode<T> node;
        boolean removed;

        RemoveResult(BSTNode<T> node, boolean removed) {
            this.node = node;
            this.removed = removed;
        }
    }

    BSTNode<T> root, current;
    String AllKeys;

    public BST() {
        root = current = null;
    }

    public boolean empty() {
        return root == null;
    }

    public boolean full() {
        return false;
    }

    public T retrieve() {
        return current != null ? current.data : null;
    }

    public boolean findkey(String tkey) {
        BSTNode<T> p = root;
        BSTNode<T> q = root;

        if (empty())
            return false;

        while (p != null) {
            q = p;
            if (p.key.compareToIgnoreCase(tkey) == 0) {
                current = p;
                return true;
            } else if (tkey.compareToIgnoreCase(p.key) < 0)
                p = p.left;
            else
                p = p.right;
        }

        current = q;
        return false;
    }

    public boolean insert(String k, T val) {
        BSTNode<T> p;
        BSTNode<T> q = current;

        if (findkey(k)) {
            current = q;
            return false;
        }

        p = new BSTNode<>(k, val);
        if (empty()) {
            root = current = p;
            return true;
        } else {
            if (k.compareToIgnoreCase(current.key) < 0)
                current.left = p;
            else
                current.right = p;
            current = p;
            return true;
        }
    }

    public boolean remove_key(String tkey) {
        RemoveResult result = remove_aux(tkey, root);
        root = result.node;
        current = root;
        return result.removed;
    }

    private RemoveResult remove_aux(String key, BSTNode<T> p) {
        if (p == null)
            return new RemoveResult(null, false);

        if (key.compareToIgnoreCase(p.key) < 0) {
            RemoveResult result = remove_aux(key, p.left);
            p.left = result.node;
            return new RemoveResult(p, result.removed);
        } else if (key.compareToIgnoreCase(p.key) > 0) {
            RemoveResult result = remove_aux(key, p.right);
            p.right = result.node;
            return new RemoveResult(p, result.removed);
        } else {
            // Node to remove found
            if (p.left != null && p.right != null) {
                BSTNode<T> q = find_min(p.right);
                p.key = q.key;
                p.data = q.data;
                RemoveResult result = remove_aux(q.key, p.right);
                p.right = result.node;
                return new RemoveResult(p, true);
            } else {
                BSTNode<T> child = (p.left != null) ? p.left : p.right;
                return new RemoveResult(child, true);
            }
        }
    }

    private BSTNode<T> find_min(BSTNode<T> p) {
        if (p == null)
            return null;
        while (p.left != null) {
            p = p.left;
        }
        return p;
    }

    public boolean update(String key, T data) {
        if (current == null) {
            return false;  // safer: no current to remove
        }
        remove_key(current.key);
        return insert(key, data);
    }

    public String preOrder() {
        AllKeys = "";
        if (root != null)
            preorder(root);
        return AllKeys;
    }

    private void preorder(BSTNode<T> p) {
        if (p != null) {
            if (AllKeys.equals(""))
                AllKeys = p.key;
            else
                AllKeys += " AND " + p.key;

            if (p.left != null)
                preorder(p.left);
            if (p.right != null)
                preorder(p.right);
        }
    }
}
