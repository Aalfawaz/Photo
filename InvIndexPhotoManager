public class InvIndexPhotoManager {
    BST<LinkedList<Photo>> indexedPhotos;

    public InvIndexPhotoManager() {
        indexedPhotos = new BST<LinkedList<Photo>>();
    }

    public void addPhoto(Photo p) {
        LinkedList<String> tags = p.getTags();
        if (!tags.empty()) {
            tags.findFirst();
            while (!tags.last()) {
                if (indexedPhotos.findkey(tags.retrieve())) {
                    LinkedList<Photo> photos_inverted = indexedPhotos.retrieve();
                    photos_inverted.insert(p);
                    indexedPhotos.update(tags.retrieve(), photos_inverted);
                } else {
                    LinkedList<Photo> photos_inverted = new LinkedList<Photo>();
                    photos_inverted.insert(p);
                    indexedPhotos.insert(tags.retrieve(), photos_inverted);
                }
                tags.findNext();
            }
            // Handle last tag
            if (indexedPhotos.findkey(tags.retrieve())) {
                LinkedList<Photo> photos_inverted = indexedPhotos.retrieve();
                photos_inverted.insert(p);
                indexedPhotos.update(tags.retrieve(), photos_inverted);
            } else {
                LinkedList<Photo> photos_inverted = new LinkedList<Photo>();
                photos_inverted.insert(p);
                indexedPhotos.insert(tags.retrieve(), photos_inverted);
            }
        }
    }

    public void deletePhoto(String path) {
        String AllTags = indexedPhotos.preOrder();
        String[] tags = AllTags.split(" AND ");

        for (int i = 0; i < tags.length; i++) {
            indexedPhotos.findkey(tags[i]);
            LinkedList<Photo> photos_inverted = indexedPhotos.retrieve();
            photos_inverted.findFirst();
            while (!photos_inverted.last()) {
                if (photos_inverted.retrieve().getPath().compareToIgnoreCase(path) == 0) {
                    photos_inverted.remove();
                    break;
                } else {
                    photos_inverted.findNext();
                }
            }
            // Check last element
            if (photos_inverted.retrieve().getPath().compareToIgnoreCase(path) == 0) {
                photos_inverted.remove();
            }

            if (photos_inverted.getSize() == 0) {
                indexedPhotos.remove_key(tags[i]);
            } else {
                indexedPhotos.update(tags[i], photos_inverted);
            }
        }
    }

    public BST<LinkedList<Photo>> getPhotos() {
        return indexedPhotos;
    }
}
