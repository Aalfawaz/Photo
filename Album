public class Album {
    private String name;
    private String condition;
    private PhotoManager manager;
    private int NbComps;

    // Constructor
    public Album(String name, String condition, PhotoManager manager) {
        this.name = name;
        this.condition = condition;
        this.manager = manager;
        NbComps = 0;
    }

    // Return the name of the album
    public String getName() {
        return name;
    }

    // Return the condition associated with the album
    public String getCondition() {
        return condition;
    }

    // Return the manager
    public PhotoManager getManager() {
        return manager;
    }

    // Return all photos that satisfy the album condition
    public LinkedList<Photo> getPhotos() {
        LinkedList<Photo> resultPhotos = new LinkedList<Photo>();
        {
            LinkedList<Photo> photos1 = manager.getPhotos();
            if (!photos1.empty()) {
                photos1.findFirst();
                while (!photos1.last()) {
                    resultPhotos.insert(new Photo(photos1.retrieve().getPath(), photos1.retrieve().getTags()));
                    photos1.findNext();
                }
                resultPhotos.insert(new Photo(photos1.retrieve().getPath(), photos1.retrieve().getTags()));
            }
        }
        NbComps = 0;

        if (this.condition.compareTo("") != 0) {
            String[] Array = condition.split(" AND ");

            resultPhotos.findFirst();
            while (!resultPhotos.last()) {
                Photo photo = resultPhotos.retrieve();
                if (!allAvilable(photo.photoTags, Array))
                    resultPhotos.remove();
                else
                    resultPhotos.findNext();
            }
            Photo photo11 = resultPhotos.retrieve();
            if (!allAvilable(photo11.photoTags, Array))
                resultPhotos.remove();
            else
                resultPhotos.findNext();
        }
        return resultPhotos;
    }

    // Return the number of tag comparisons used to find all photos of the album
    public int getNbComps() {
        return NbComps;
    }

    private boolean allAvilable(LinkedList<String> photoTags, String[] Array) {
        boolean isValid = true;

        if (photoTags.empty())
            isValid = false;
        else {
            for (int i = 0; i < Array.length && isValid; i++) {
                boolean found_in_tags = false;
                photoTags.findFirst();

                while (!photoTags.last()) {
                    this.NbComps++;
                    if (photoTags.retrieve().compareToIgnoreCase(Array[i]) == 0) {
                        found_in_tags = true;
                        break;
                    }
                    photoTags.findNext();
                }
                if (!found_in_tags) {
                    this.NbComps++;
                    if (photoTags.retrieve().compareToIgnoreCase(Array[i]) == 0)
                        found_in_tags = true;
                }
                if (!found_in_tags)
                    isValid = false;
            }
        }
        return isValid;
    }
}
